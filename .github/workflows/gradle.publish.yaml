# Based off https://github.com/MinecraftForge/SharedActions/blob/main/.github/workflows/gradle.yml
name: Gradle Publishing CI

on:
  workflow_call:
    inputs:
      java:
        description: "The version of Java to use to run Gradle"
        required: false
        type: string
        default: "21"
      gradle_tasks:
        description: "The Gradle task(s) to run at publication"
        required: false
        type: string
        default: "publish"
      curse_release_type:
        description: "The type of release to publish to CurseForge"
        required: false
        type: string
        default: "beta"
      changelog_max_issues:
        description: "The maximum number of issues to include in the changelog"
        required: false
        type: number
        default: 100
    secrets:
      DISCORD_WEBHOOK:
        required: true
      MAVEN_USER:
        required: true
      MAVEN_PASSWORD:
        required: true
      CURSE_API_KEY:
        required: true
      CROWDIN_API_KEY:
        required: true
      GRADLE_ENCRYPTION_KEY:
        description: The AES key to enable Gradle cache encryption
        required: true

permissions:
  contents: write
  statuses: write

jobs:
  compute-version:
    uses: ./.github/workflows/gradle.version.yaml

  notify-build-start:
    needs: [ "compute-version" ]
    name: "🔴 Build notifications (start)"
    runs-on: ubuntu-latest
    steps:
      - uses: neoforged/action-webhooks@v1
        name: "🔴 Send Discord start notification"
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK }}
          status: 'started'
          version: "${{ needs.compute-version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: neoforged/action-github-status@v1
        name: "🚧 Set pending status"
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'Publishing'
          state: 'pending'
          description: "Version: ${{ needs.compute-version.outputs.version }}"
          target_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  gradle:
    needs: [ "compute-version" ]
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: "📦 Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1000
          fetch-tags: true

      - id: setupJava
        name: "🔧 Setup Java"
        run: |
          echo "JAVA_HOME=$(echo $JAVA_HOME_${{ inputs.java }}_X64)" >> "$GITHUB_ENV"

      - id: setupGradle
        name: "🔧 Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          dependency-graph: generate-and-submit
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

      - id: tagLocalBuild
        name: "🏷️ Tag local build"
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "maintainer+github@ldtteam.com"
          git tag -a v${{ needs.compute_version.outputs.minecraft_version }}-${{ needs.compute-version.outputs.version }} -m "Version ${{ needs.compute-version.outputs.version }} for Minecraft ${{ needs.compute_version.outputs.minecraft_version }}"

      - id: generate-release-changelog-version-regex
        name: "📝 Generate release changelog version regex"
        run: |
          version_regex=${echo "${{ needs.compute_version.outputs.minecraft_version }}" | sed 's/\./\\./g'}
          echo "Changelog version regex: ${version_regex}"
          echo "version_regex=${version_regex}" >> "$GITHUB_ENV"

      - id: generate-release-changelog
        name: "📝 Generate release changelog"
        uses: heinrichreimer/action-github-changelog-generator@v2.4
        with:
          output: changelog.md
          token: ${{ secrets.GITHUB_TOKEN }}
          stripGeneratorNotice: "true"
          onlyLastTag: true
          excludeTagsRegex: "^(?!v${{ steps.generate-release-changelog-version-regex.outputs.version_regex }}).+$"
          maxIssues: ${{ inputs.changelog_max_issues }}

      - id: generate-release-suffix
        name: "Generate release suffix"
        run: |
          release_version_suffix="alpha"
          if [[ ${{ inputs.curse_release_type }} == release ]]; then
            release_version_suffix=""
          elif [[ ${{ inputs.curse_release_type }} == beta ]]; then
            release_version_suffix="snapshot"
          fi
          echo "Release version suffix: ${release_version_suffix}"
          echo "release_version_suffix=${release_version_suffix}" >> "$GITHUB_ENV"

      - id: publish
        name: "🚀 Publish"
        run: ./gradlew --build-cache ${{ inputs.gradle_tasks }} -PmodVersion=${{ needs.compute-version.outputs.version }} -PmodVersionSuffix=${{ steps.generate-release-suffix.outputs.release_version_suffix }}
        env:
          LDTTeamJfrogUsername: ${{ secrets.MAVEN_USER }}
          LDTTeamJfrogPassword: ${{ secrets.MAVEN_PASSWORD }}
          CURSE_API_KEY: ${{ secrets.CURSE_API_KEY }}
          CURSE_RELEASE_TYPE: ${{ inputs.curse_release_type }}
          crowdinKey: ${{ secrets.CROWDIN_API_KEY }}

      - name: "🚀 Create GitHub release"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.compute_version.outputs.minecraft_version }}-${{ needs.compute-version.outputs.version }}
          release_name: "Release ${{ needs.compute-version.outputs.version }} for Minecraft ${{ needs.compute_version.outputs.minecraft_version }}"
          body_path: changelog.md
          prerelease: ${{ inputs.curse_release_type != 'release' }}

  notify-build-end:
    name: Build notifications (end)
    needs: [ "compute-version", "notify-build-start", "gradle" ]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: neoforged/action-webhooks@v1
        name: "🔴 Send Discord end notification"
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ needs.gradle.result }}
          version: "${{ needs.compute-version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: neoforged/action-github-status@v1
        name: "🚧 Set build status"
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: 'Publishing'
          state: ${{ needs.gradle.result }}
          description: "Version: ${{ needs.compute-version.outputs.version }}"
          target_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
